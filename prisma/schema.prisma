generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model company {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  address     String?  @db.VarChar(255)
  city        String?  @db.VarChar(255)
  state       String?  @db.VarChar(255)
  zip         String?  @db.VarChar(10)
  country     String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model message {
  id                             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content                        String   @db.VarChar(255)
  sender_id                      String   @db.Uuid
  receiver_id                    String   @db.Uuid
  timestamp                      DateTime @default(now()) @db.Timestamp(6)
  platform                       String?  @db.VarChar(255)
  status                         String?  @db.VarChar(255)
  created_at                     DateTime @default(now()) @db.Timestamp(6)
  updated_at                     DateTime @default(now()) @db.Timestamp(6)
  user_message_receiver_idTouser user     @relation("message_receiver_idTouser", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_message_sender_idTouser   user     @relation("message_sender_idTouser", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model permission {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @db.VarChar(255)
  description     String?           @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  role_permission role_permission[]
}

model role {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @db.VarChar(255)
  description     String?           @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  updated_at      DateTime          @default(now()) @db.Timestamp(6)
  role_permission role_permission[]
  user_role       user_role[]
}

model role_permission {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role_id       String     @db.Uuid
  permission_id String     @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  permission    permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  role          role       @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                             String      @unique @db.VarChar(255)
  firstName                         String?     @db.VarChar(255)
  lastName                          String?     @db.VarChar(255)
  roq_user_id                       String      @db.VarChar(255)
  tenant_id                         String      @db.VarChar(255)
  created_at                        DateTime    @default(now()) @db.Timestamp(6)
  updated_at                        DateTime    @default(now()) @db.Timestamp(6)
  company                           company[]
  message_message_receiver_idTouser message[]   @relation("message_receiver_idTouser")
  message_message_sender_idTouser   message[]   @relation("message_sender_idTouser")
  user_role                         user_role[]
}

model user_role {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  role_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  role       role     @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
